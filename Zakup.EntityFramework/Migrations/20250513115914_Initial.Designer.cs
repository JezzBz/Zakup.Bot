// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Zakup.EntityFramework;

#nullable disable

namespace Zakup.EntityFramework.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250513115914_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TelegramDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ThumbnailId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TelegramDocuments");
                });

            modelBuilder.Entity("Zakup.Entities.ChannelAdministrator", b =>
                {
                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsManual")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.HasKey("ChannelId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ChannelAdministrators");
                });

            modelBuilder.Entity("Zakup.Entities.ChannelFeedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("FromUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Positive")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.ToTable("ChannelFeedback");
                });

            modelBuilder.Entity("Zakup.Entities.ChannelJoinRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ApprovedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeclinedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InviteLink")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime?>("RequestedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("ChannelJoinRequests");
                });

            modelBuilder.Entity("Zakup.Entities.ChannelMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint");

                    b.Property<string>("InviteLink")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("InviteLinkName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("IsCommenter")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPremium")
                        .HasColumnType("boolean");

                    b.Property<int>("JoinCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("JoinedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LeftUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Refer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("TelegramZakupId")
                        .HasColumnType("uuid");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid?>("ZakupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("TelegramZakupId");

                    b.HasIndex("ZakupId");

                    b.ToTable("ChannelMembers");
                });

            modelBuilder.Entity("Zakup.Entities.ChannelRating", b =>
                {
                    b.Property<long>("ChannelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ChannelId"));

                    b.Property<long>("BadDeals")
                        .HasColumnType("bigint");

                    b.Property<long>("Rate")
                        .HasColumnType("bigint");

                    b.HasKey("ChannelId");

                    b.ToTable("ChannelRatings");
                });

            modelBuilder.Entity("Zakup.Entities.ChannelSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint");

                    b.Property<string>("SpreadSheetId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("SpreadSheetId");

                    b.ToTable("ChannelSheets");
                });

            modelBuilder.Entity("Zakup.Entities.MessageForward", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ForwardAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Source")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("MessageForwards");
                });

            modelBuilder.Entity("Zakup.Entities.TelegramAdPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Buttons")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Entities")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("HasDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("FileId");

                    b.ToTable("TelegramAdPosts");
                });

            modelBuilder.Entity("Zakup.Entities.TelegramChannel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long?>("ChannelChatId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasDeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("MinutesToAcceptRequest")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("Zakup.Entities.TelegramUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("MutedToUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Refer")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserStateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserStateId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Zakup.Entities.TelegramUserState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CachedValue")
                        .HasColumnType("text");

                    b.Property<int?>("MenuMessageId")
                        .HasColumnType("integer");

                    b.Property<int>("PreviousMessageId")
                        .HasColumnType("integer");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserStates");
                });

            modelBuilder.Entity("Zakup.Entities.TelegramZakup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("AdPostId")
                        .HasColumnType("uuid");

                    b.Property<string>("Admin")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("InviteLink")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<bool>("IsPad")
                        .HasColumnType("boolean");

                    b.Property<bool>("NeedApprove")
                        .HasColumnType("boolean");

                    b.Property<string>("Platform")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTime?>("PostTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("ZakupSource")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdPostId");

                    b.HasIndex("ChannelId");

                    b.ToTable("TelegramZakups");
                });

            modelBuilder.Entity("Zakup.Entities.UserSpreadSheet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SpreadSheets");
                });

            modelBuilder.Entity("Zakup.Entities.ZakupClient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ZakupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("ZakupId");

                    b.ToTable("ZakupClients");
                });

            modelBuilder.Entity("Zakup.Entities.ChannelAdministrator", b =>
                {
                    b.HasOne("Zakup.Entities.TelegramChannel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zakup.Entities.TelegramUser", "User")
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Zakup.Entities.ChannelFeedback", b =>
                {
                    b.HasOne("Zakup.Entities.TelegramUser", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromUser");
                });

            modelBuilder.Entity("Zakup.Entities.ChannelJoinRequest", b =>
                {
                    b.HasOne("Zakup.Entities.TelegramChannel", "Channel")
                        .WithMany("JoinRequests")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("Zakup.Entities.ChannelMember", b =>
                {
                    b.HasOne("Zakup.Entities.TelegramChannel", "Channel")
                        .WithMany("Members")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zakup.Entities.TelegramZakup", null)
                        .WithMany("Members")
                        .HasForeignKey("TelegramZakupId");

                    b.HasOne("Zakup.Entities.TelegramZakup", "Zakup")
                        .WithMany()
                        .HasForeignKey("ZakupId");

                    b.Navigation("Channel");

                    b.Navigation("Zakup");
                });

            modelBuilder.Entity("Zakup.Entities.ChannelSheet", b =>
                {
                    b.HasOne("Zakup.Entities.TelegramChannel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zakup.Entities.UserSpreadSheet", "SpreadSheet")
                        .WithMany()
                        .HasForeignKey("SpreadSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("SpreadSheet");
                });

            modelBuilder.Entity("Zakup.Entities.TelegramAdPost", b =>
                {
                    b.HasOne("Zakup.Entities.TelegramChannel", "Channel")
                        .WithMany("AdPosts")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TelegramDocument", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.Navigation("Channel");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Zakup.Entities.TelegramUser", b =>
                {
                    b.HasOne("Zakup.Entities.TelegramUserState", "UserState")
                        .WithMany()
                        .HasForeignKey("UserStateId");

                    b.Navigation("UserState");
                });

            modelBuilder.Entity("Zakup.Entities.TelegramUserState", b =>
                {
                    b.HasOne("Zakup.Entities.TelegramUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Zakup.Entities.TelegramZakup", b =>
                {
                    b.HasOne("Zakup.Entities.TelegramAdPost", "AdPost")
                        .WithMany()
                        .HasForeignKey("AdPostId");

                    b.HasOne("Zakup.Entities.TelegramChannel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdPost");

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("Zakup.Entities.UserSpreadSheet", b =>
                {
                    b.HasOne("Zakup.Entities.TelegramUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Zakup.Entities.ZakupClient", b =>
                {
                    b.HasOne("Zakup.Entities.ChannelMember", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zakup.Entities.TelegramZakup", "Zakup")
                        .WithMany("Clients")
                        .HasForeignKey("ZakupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Zakup");
                });

            modelBuilder.Entity("Zakup.Entities.TelegramChannel", b =>
                {
                    b.Navigation("AdPosts");

                    b.Navigation("JoinRequests");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("Zakup.Entities.TelegramZakup", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
