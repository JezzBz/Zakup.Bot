using System.Text;
using Microsoft.EntityFrameworkCore;
using Quartz;
using Telegram.Bot;
using Telegram.Bot.Types.Enums;
using Zakup.EntityFramework;

namespace Zakup.WebHost.Jobs
{
    [Quartz.DisallowConcurrentExecution]
    public class DailyReportJob : IJob
    {
        private readonly IServiceProvider _serviceProvider;
        private readonly ITelegramBotClient _botClient;
        
        // –°–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö channelID (—Å –º–∏–Ω—É—Å–æ–º –∏ –±–µ–∑)
        private static readonly HashSet<long> ExcludedChannelIds = new HashSet<long>
        {
            -1001604009390,
            1001604009390,
            1001604009390,
            1001949755557,
            1002085914357,
            1001918504251,
            1001911746541,
            1002075953372,
            1001717331382,
            1002201315975,
            1001975319185,
            1002390555756,
            1002399743958,
            1002327754766,
            1002337960205,
            1002142889796,
            1001790694740,
            1001435462526,
            1001720817287,
            1002431585440,
            1002037629068,
            1001672252979,
            1002264429816,
            1001947856224,
            1002066792944,
            1002235429960,
            1002106907647,
            1002155267313,
            1001435747224,
            1002378347273,
            1002358718448,
            1001876618438,
            1002433711383,
            1001269139057,
            1001551764869,
            1002416314170,
            1002056290315,
            1002032201068,
            1002494587355,
            1001916089175,
            1001625740999,
            1001167103913,
            1002303580470,
            1001618905835,
            1002455971509,
            1002042855376,
            1002375539517,
            1002409666993,
            1002487229302,
            1002303948607,
            1002094539447,
            1002308762880,
            1002106475282,
            1001852243980,
            1002103700035,
            1001895648812,
            1001905395305,
            1002315506517,
            1001900276219,
            -1001604009390,
            -1001949755557,
            -1002085914357,
            -1001918504251,
            -1001911746541,
            -1002075953372,
            -1001717331382,
            -1002201315975,
            -1001975319185,
            -1002390555756,
            -1002399743958,
            -1002327754766,
            -1002337960205,
            -1002142889796,
            -1001790694740,
            -1001435462526,
            -1001720817287,
            -1002431585440,
            -1002037629068,
            -1001672252979,
            -1002264429816,
            -1001947856224,
            -1002066792944,
            -1002235429960,
            -1002106907647,
            -1002155267313,
            -1001435747224,
            -1002378347273,
            -1002358718448,
            -1001876618438,
            -1002433711383,
            -1001269139057,
            -1001551764869,
            -1002416314170,
            -1002056290315,
            -1002032201068,
            -1002494587355,
            -1001916089175,
            -1001625740999,
            -1001167103913,
            -1002303580470,
            -1001618905835,
            -1002455971509,
            -1002042855376,
            -1002375539517,
            -1002409666993,
            -1002487229302,
            -1002303948607,
            -1002094539447,
            -1002308762880,
            -1002106475282,
            -1001852243980,
            -1002103700035,
            -1001895648812,
            -1001905395305,
            -1002315506517,
            -1001900276219
        };

        public DailyReportJob(IServiceProvider serviceProvider, ITelegramBotClient botClient)
        {
            _serviceProvider = serviceProvider;
            _botClient = botClient;
        }
        
        /// <summary>
        /// –ú–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è Quartz
        /// </summary>
        public async Task Execute(IJobExecutionContext context)
        {
            int totalReportsSent = 0;
            int totalUsersNotified = 0;
            var notifiedUsers = new HashSet<long>();

            try
            {
                Console.WriteLine($"[DailyReport] –ó–∞–ø—É—Å–∫ –æ—Ç—á–µ—Ç–∞ {(context == null ? "–≤—Ä—É—á–Ω—É—é" : "–ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")}");

                // –°–æ–∑–¥–∞–µ–º —Å–∫–æ—É–ø –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
                await using var scope = _serviceProvider.CreateAsyncScope();
                var database = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();

                // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—ã (–≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å —Å 00:00 –¥–æ 23:59:59 –ø–æ –ú–°–ö)
                var moscowTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Europe/Moscow");
                var nowMoscow = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, moscowTimeZone);
                var yesterdayMoscow = nowMoscow.AddDays(-1).Date;
                var startOfYesterdayUtc = TimeZoneInfo.ConvertTimeToUtc(yesterdayMoscow, moscowTimeZone);
                var endOfYesterdayUtc = startOfYesterdayUtc.AddDays(1).AddTicks(-1);

                Console.WriteLine($"[DailyReport] –ó–∞–ø—É—Å–∫ –æ—Ç—á–µ—Ç–∞ –∑–∞ {yesterdayMoscow:yyyy-MM-dd}");

                // –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –¥–∞—Ç–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞
                string[] daysOfWeek = { "–≤—Å", "–ø–Ω", "–≤—Ç", "—Å—Ä", "—á—Ç", "–ø—Ç", "—Å–±" };
                string[] months = { "—è–Ω–≤", "—Ñ–µ–≤", "–º–∞—Ä", "–∞–ø—Ä", "–º–∞–π", "–∏—é–Ω", "–∏—é–ª", "–∞–≤–≥", "—Å–µ–Ω", "–æ–∫—Ç", "–Ω–æ—è", "–¥–µ–∫" };
                string dateStr = $"{daysOfWeek[(int)yesterdayMoscow.DayOfWeek]}, {yesterdayMoscow.Day} {months[yesterdayMoscow.Month - 1]}. {yesterdayMoscow.Year}";

                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –ë–î, –∏—Å–∫–ª—é—á–∞—è —É–∫–∞–∑–∞–Ω–Ω—ã–µ channelID
                var channels = await database.Channels
                    .Where(c => !c.HasDeleted && !ExcludedChannelIds.Contains(c.Id) && !ExcludedChannelIds.Contains(-c.Id))
                    .ToListAsync();

                Console.WriteLine($"[DailyReport] –ù–∞–π–¥–µ–Ω–æ {channels.Count} –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞");

                if (!channels.Any())
                {
                    Console.WriteLine($"[DailyReport] –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞");
                    return;
                }

                // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                foreach (var channel in channels)
                {
                    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
                    var joinedYesterday = await database.ChannelMembers
                        .Where(m => m.ChannelId == channel.Id)
                        .Where(m => m.JoinedUtc >= startOfYesterdayUtc && m.JoinedUtc <= endOfYesterdayUtc)
                        .ToListAsync();

                    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–ø–∏—Å–æ–∫ –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
                    var leftYesterday = await database.ChannelMembers
                        .Where(m => m.ChannelId == channel.Id)
                        .Where(m => m.LeftUtc >= startOfYesterdayUtc && m.LeftUtc <= endOfYesterdayUtc)
                        .ToListAsync();

                    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                    var currentSubscribersCount = await database.ChannelMembers
                        .CountAsync(m => m.ChannelId == channel.Id && m.Status && m.LeftUtc == null);

                    // –í—ã—á–∏—Å–ª—è–µ–º –¥–µ–ª—å—Ç—É (—Å–∫–æ–ª—å–∫–æ +/- –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∑–∞ –¥–µ–Ω—å)
                    int subscribersDelta = joinedYesterday.Count - leftYesterday.Count;

                    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∞–≤—à–∏—Ö—Å—è –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º (–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º)
                    var joinedBySource = joinedYesterday
                        .GroupBy(m => string.IsNullOrEmpty(m.InviteLinkName) ? "–±–µ–∑ —Å—Å—ã–ª–∫–∏" : m.InviteLinkName)
                        .ToDictionary(g => g.Key, g => g.ToList());

                    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç–ø–∏—Å–∞–≤—à–∏—Ö—Å—è –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
                    var leftBySource = leftYesterday
                        .GroupBy(m => string.IsNullOrEmpty(m.InviteLinkName) ? "–±–µ–∑ —Å—Å—ã–ª–∫–∏" : m.InviteLinkName)
                        .ToDictionary(g => g.Key, g => g.ToList());

                    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞
                    var messageBuilder = new StringBuilder();

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞—Ö
                    if (joinedYesterday.Count == 0 && leftYesterday.Count == 0)
                    {
                        Console.WriteLine($"[DailyReport] –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞—Ö –∫–∞–Ω–∞–ª–∞ '{channel.Title}', –æ—Ç—á–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è");
                        continue;
                    }

                    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
                    messageBuilder.AppendLine($"–ó–∞ –≤—á–µ—Ä–∞, {dateStr}, —É –≤–∞—Å {(subscribersDelta >= 0 ? "+" : "")}{subscribersDelta} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –≤—Å–µ–≥–æ {currentSubscribersCount} –≤ –∫–∞–Ω–∞–ª–µ ¬´{channel.Title}¬ª");
                    messageBuilder.AppendLine();

                    // –†–∞–∑–¥–µ–ª —Å –Ω–æ–≤—ã–º–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏
                    messageBuilder.AppendLine($"üü¢ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å: {joinedYesterday.Count}");
                    messageBuilder.AppendLine();

                    // –ü–µ—Ä–µ—á–∏—Å–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∞–≤—à–∏—Ö—Å—è –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
                    foreach (var source in joinedBySource)
                    {
                        messageBuilder.AppendLine($"({source.Value.Count}) {source.Key}:");

                        foreach (var member in source.Value)
                        {
                            var joinTime = TimeZoneInfo.ConvertTimeFromUtc(member.JoinedUtc ?? DateTime.UtcNow, moscowTimeZone);
                            var isPremium = member.IsPremium == true ? " ‚òÖ" : "";

                            string userName = string.IsNullOrEmpty(member.UserName)
                                ? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                                : member.UserName;

                            messageBuilder.AppendLine($"{joinTime:HH:mm} [{userName}](tg://user?id={member.UserId}){isPremium}");
                        }
                        messageBuilder.AppendLine();
                    }

                    // –†–∞–∑–¥–µ–ª —Å –æ—Ç–ø–∏—Å–∞–≤—à–∏–º–∏—Å—è
                    if (leftYesterday.Count > 0)
                    {
                        messageBuilder.AppendLine($"üî¥ –û—Ç–ø–∏—Å–∞–ª–∏—Å—å: {leftYesterday.Count}");
                        messageBuilder.AppendLine();

                        // –ü–µ—Ä–µ—á–∏—Å–ª—è–µ–º –æ—Ç–ø–∏—Å–∞–≤—à–∏—Ö—Å—è –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
                        foreach (var source in leftBySource)
                        {
                            messageBuilder.AppendLine($"({source.Value.Count}) {source.Key}:");

                            foreach (var member in source.Value)
                            {
                                var leftTime = TimeZoneInfo.ConvertTimeFromUtc(member.LeftUtc ?? DateTime.UtcNow, moscowTimeZone);
                                var isPremium = member.IsPremium == true ? " ‚òÖ" : "";

                                // –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –∫–∞–Ω–∞–ª–µ
                                int daysInChannel = 0;
                                if (member.JoinedUtc.HasValue && member.LeftUtc.HasValue)
                                {
                                    daysInChannel = (int)(member.LeftUtc.Value - member.JoinedUtc.Value).TotalDays;
                                }

                                string userName = string.IsNullOrEmpty(member.UserName)
                                    ? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                                    : member.UserName;

                                messageBuilder.AppendLine($"{leftTime:HH:mm} [{userName}](tg://user?id={member.UserId}){isPremium} ({daysInChannel} –¥–Ω–µ–π)");
                            }
                            messageBuilder.AppendLine();
                        }
                    }

                    // –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∫–∞–Ω–∞–ª–∞
                    var admins = await database.ChannelAdministrators
                        .Where(r => r.ChannelId == channel.Id)
                        .Select(r => r.User)
                        .ToListAsync();

                    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –∫–∞–Ω–∞–ª–∞
                    var botUsers = await database.Users
                        .Where(u => admins.Select(a => a.Id).Contains(u.Id))
                        .ToListAsync();

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                    foreach (var admin in botUsers)
                    {
                        try
                        {
                            await _botClient.SendTextMessageAsync(
                                admin.Id,
                                messageBuilder.ToString(),
                                parseMode: ParseMode.Markdown,
                                disableWebPagePreview: true
                            );

                            totalReportsSent++;
                            if (notifiedUsers.Add(admin.Id))
                            {
                                totalUsersNotified++;
                            }

                            Console.WriteLine($"[DailyReport] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—á–µ—Ç –ø–æ –∫–∞–Ω–∞–ª—É '{channel.Title}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {admin.Id}");
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"[DailyReport] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {admin.Id}: {ex.Message}");
                        }
                    }
                }

                Console.WriteLine($"[DailyReport] –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {totalReportsSent} –æ—Ç—á–µ—Ç–æ–≤ {totalUsersNotified} —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[DailyReport] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {ex}");
                throw;
            }
        }
    }
} 