services:
  telegram-analyzer:
    build:
      context: ./tg
      dockerfile: Dockerfile
    container_name: telegram-analyzer
    volumes:
      - ./tg/sessionsPREM:/app/sessionsPREM
      - ./tg/similar:/app/similar
    ports:
      - "8000:8000"
    networks:
      - analyzer-network
    environment:
      - PYTHONUNBUFFERED=1
    depends_on:
      - db
    restart: unless-stopped

  zakup-api:
    build:
      context: .
      dockerfile: Zakup.WebHost/Dockerfile

    container_name: zakup-api
    ports:
      - "8080:8080"
    networks:
      - analyzer-network
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DbContext=Server=db;Port=5432;Database=PostBotV2;User Id=postgres;Password=the_password
      - MinIO__Endpoint=minio:9000
      - MinIO__AccessKey=minioadmin
      - MinIO__SecretKey=minioadmin
      - MinIO__UseSSL=false
      - MinIO__BucketName=zakup
      - AnalyzeApi__BaseUrl=http://telegram-analyzer:8000
    depends_on:
      -  db

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - analyzer-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped


  db:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: PostBotV2
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: the_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - analyzer-network

networks:
  analyzer-network:
    driver: bridge

volumes:
  minio_data:
  postgres-data:
