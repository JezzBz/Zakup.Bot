import asyncio
import random
import re
import os
import pathlib
from datetime import datetime
from loguru import logger
from collections import deque
import openpyxl
import argparse
import json
import pandas as pd

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞
BASE_DIR = pathlib.Path(__file__).parent
SIMILAR_DIR = BASE_DIR / "similar"
SIMILAR_DIR.mkdir(exist_ok=True)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—É—Ç–µ–π
SIMILAR_DIR = os.getenv('SIMILAR_DIR', str(BASE_DIR / "similar"))  # –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ similar, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'similar'

from telethon import TelegramClient
from telethon.errors import (
    UserAlreadyParticipantError,
    InviteRequestSentError,
    InviteHashExpiredError,
    AuthKeyDuplicatedError,
    PhoneNumberInvalidError
)
from telethon.tl.functions.messages import ImportChatInviteRequest
from telethon.tl.functions.channels import JoinChannelRequest, GetChannelRecommendationsRequest

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–π
try:
    from opentele.td import TDesktop
    from opentele.tl import TelegramClient as OpenTeleClient
    from opentele.api import UseCurrentSession
    OPENTELE_AVAILABLE = True
except ImportError:
    logger.warning("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ opentele –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    OPENTELE_AVAILABLE = False

from config import TELEGRAM_CONFIG
from channel_parser import TelegramChannel
from session_manager import (
    handle_flood_wait, 
    check_authorization, 
    handle_un_auth_error, 
    calculate_delay
)

from utils import (
    append_data_to_file,
    readFileToStrips,

)

async def get_similar_channels(client: TelegramClient, channel_identifier: str):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Ö–æ–∂–∏–µ –∫–∞–Ω–∞–ª—ã –æ—Ç Telegram API.
    
    Args:
        client: –ö–ª–∏–µ–Ω—Ç Telegram
        channel_identifier: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞
        
    Returns:
        list: –°–ø–∏—Å–æ–∫ –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
    """
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ InputChannel (Telethon —Å–∞–º –≤—ã–ø–æ–ª–Ω–∏—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é)
        input_channel = await client.get_entity(channel_identifier)
        
        # –í—ã–∑—ã–≤–∞–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        try:
            result = await client(GetChannelRecommendationsRequest(channel=input_channel))
            
            # –ï—Å–ª–∏ –ø–æ–ª–µ chats –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ ‚Äì –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            similar_channels = result.chats if hasattr(result, "chats") else []
            
            # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–∞—Ö
            channel_info = []
            for channel in similar_channels:
                title = getattr(channel, 'title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                username = getattr(channel, 'username', None)
                channel_id = getattr(channel, 'id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ID')
                link = f"@{username}" if username else f"ID: {channel_id}"
                channel_info.append(f"{title} ({link})")
            
            # logger.info(
            #     f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç GetChannelRecommendations –¥–ª—è {channel_identifier}:\n" + 
            #     "\n".join([f"- {info}" for info in channel_info]) if channel_info else "–ü–æ—Ö–æ–∂–∏–µ –∫–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            # )
            return similar_channels
        except ConnectionError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è {channel_identifier}: {e}")
            return []
        except asyncio.TimeoutError:
            logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è {channel_identifier}")
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ GetChannelRecommendationsRequest –¥–ª—è {channel_identifier}: {e}")
            return []
            
    except ConnectionError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ entity –¥–ª—è {channel_identifier}: {e}")
        return []
    except asyncio.TimeoutError:
        logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ entity –¥–ª—è {channel_identifier}")
        return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è {channel_identifier}: {e}")
        return []


def unique_key(entity) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–∞–Ω–∞–ª–∞.
    –ï—Å–ª–∏ —É –∫–∞–Ω–∞–ª–∞ –µ—Å—Ç—å username, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç '@username',
    –∏–Ω–∞—á–µ ‚Äî —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –µ–≥–æ ID.
    """
    if hasattr(entity, 'username') and entity.username:
        return f"@{entity.username}"
    else:
        return str(entity.id)


async def collect_similar_channels(client: TelegramClient, donor_identifier: str, max_depth: int = 2):
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–Ω–∞–ª–∞–º, –Ω–∞—á–∏–Ω–∞—è –æ—Ç –¥–æ–Ω–æ—Ä—Å–∫–æ–≥–æ (–≥–ª—É–±–∏–Ω–∞ 0),
    –∑–∞—Ç–µ–º –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ (–≥–ª—É–±–∏–Ω–∞ 1) –∏ –ø–æ—Ö–æ–∂–∏—Ö –¥–ª—è –ø–æ—Ö–æ–∂–∏—Ö (–≥–ª—É–±–∏–Ω–∞ 2).
    
    –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ —É—Ä–æ–≤–Ω—è 2, –µ—Å–ª–∏ –∫–∞–Ω–∞–ª —Ä–∞–Ω–µ–µ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ 1,
    –≤ —Å—Ç–æ–ª–±—Ü–µ "–î–æ–Ω–æ—Ä –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è" –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –æ—Ç –∫–∞–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –æ–Ω –ø–æ—è–≤–∏–ª—Å—è.
    –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∫–∞–Ω–∞–ª –≤—Å—Ç—Ä–µ—Ç–∏–ª—Å—è (intersections).

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞ (username –∏–ª–∏ ID),
    –∞ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏:
      {
         'title': <–Ω–∞–∑–≤–∞–Ω–∏–µ>,
         'link': <—Å—Å—ã–ª–∫–∞ –∏–ª–∏ ID>,
         'subs': <participants_count>,
         'depth': <–≥–ª—É–±–∏–Ω–∞>,
         'intersections': <—á–∏—Å–ª–æ>,
         'second_level_donor': <–µ—Å–ª–∏ depth == 2, –∏–º—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –∏–Ω–∞—á–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞>
      }
    """
    channels_map = {}
    visited = set()  # –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    # –û—á–µ—Ä–µ–¥—å: (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞, –≥–ª—É–±–∏–Ω–∞, donor –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è)
    queue = deque()
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –¥–æ–Ω–æ—Ä—Å–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (–≥–ª—É–±–∏–Ω–∞ 0, donor –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø—É—Å—Ç–æ–π)
    queue.append((donor_identifier, 0, ""))
    
    # –°—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–µ—Ä–∂–µ–∫
    request_counter = 0
    # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    base_delay = 60  # 1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ –æ–¥–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É

    while queue:
        current_id, depth, donor2 = queue.popleft()

        # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª —É–∂–µ –≤ –Ω–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ, —É–≤–µ–ª–∏—á–∏–º —Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –∏ –ø—Ä–æ–ø—É—Å—Ç–∏–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        if current_id in channels_map:
            channels_map[current_id]['intersections'] += 1
            continue

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        request_counter += 1
        if request_counter > 1:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞—Ü–∏—é –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
            delay = base_delay * random.uniform(0.8, 1.2)
            logger.info(f"–î–µ–ª–∞—é –ø–∞—É–∑—É {delay:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º #{request_counter} –¥–ª—è {current_id}")
            await asyncio.sleep(delay)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Telethon: –∑–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ–º get_entity —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ current_id
        try:
            entity = await client.get_entity(current_id)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞: {current_id}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ entity
            await asyncio.sleep(20 * random.uniform(0.8, 1.2))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è entity –¥–ª—è {current_id}: {e}")
            continue

        key = unique_key(entity)
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∫–ª—é—á –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ current_id (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–Ω–æ—Ä –∑–∞–¥–∞–Ω –∫–∞–∫ "@channel"), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        current_key = key

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        title = entity.title if hasattr(entity, 'title') else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        if hasattr(entity, 'username') and entity.username:
            link = f"https://t.me/{entity.username}"
        else:
            link = f"ID: {entity.id}"
        subs = getattr(entity, "participants_count", 0)

        channels_map[current_key] = {
            'title': title,
            'link': link,
            'subs': subs,
            'depth': depth,
            'intersections': 1,
            # –ï—Å–ª–∏ –≥–ª—É–±–∏–Ω–∞ —Ä–∞–≤–Ω–∞ 2 –∏ –∫–∞–Ω–∞–ª –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –æ—Ç –¥–æ–Ω–æ—Ä—Å–∫–æ–≥–æ (—Ç–æ –µ—Å—Ç—å donor2 –Ω–µ –ø—É—Å—Ç–æ–π), –∑–∞–ø–∏—à–µ–º –µ–≥–æ,
            # –∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
            'second_level_donor': donor2 if depth == 2 else "",
            'donor_position': ""  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–æ
        }
        visited.add(current_key)

        # –ï—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≥–ª—É–±–∏–Ω—ã, –ø–æ–ª—É—á–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ –∫–∞–Ω–∞–ª—ã
        if depth < max_depth:
            # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–ª–∏—á–µ–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
            # logger.info(f"–î–µ–ª–∞—é –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è {current_key}")
            # await asyncio.sleep(40 * random.uniform(1, 1.1))  # 3 –º–∏–Ω—É—Ç—ã ¬± 10%
            
            similar_entities = await get_similar_channels(client, current_key)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –µ—â—ë –æ–¥–Ω—É –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
            await asyncio.sleep(60 * random.uniform(0.8, 1.2))
            
            next_depth = depth + 1
            for sim in similar_entities:
                sim_key = unique_key(sim)
                # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª —É–∂–µ –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è –Ω–∞ –±–æ–ª–µ–µ —Ä–∞–Ω–Ω–µ–º —É—Ä–æ–≤–Ω–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ donor-–ø–æ–¥–æ–±–Ω—ã—Ö), —Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª–µ "–¥–æ–Ω–æ—Ä –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è" –ø—É—Å—Ç—ã–º
                next_donor = current_key if next_depth == 2 and sim_key not in channels_map else ""
                queue.append((sim_key, next_depth, next_donor))
    return channels_map


def parse_subscribers_count(subs):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: —á–∏—Å–ª–∞, —Å—Ç—Ä–æ–∫–∏ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏, None.
    """
    if subs is None:
        return 0
    if isinstance(subs, int):
        return subs
    if isinstance(subs, str):
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
        subs = ''.join(filter(str.isdigit, subs))
        return int(subs) if subs else 0
    return 0

def build_excel_table(channels_data: dict, output_file: str = "similar_channels.xlsx"):
    """
    –°—Ç—Ä–æ–∏—Ç Excel-—Ç–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ channels_data.
    –î–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è:
      - –ù–∞–∑–≤–∞–Ω–∏–µ
      - –°—Å—ã–ª–∫–∞
      - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
      - –ì–ª—É–±–∏–Ω–∞
      - –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
      - –î–æ–Ω–æ—Ä –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
      - –ü–æ–ª–æ–∂–µ–Ω–∏–µ –¥–æ–Ω–æ—Ä—Å–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ —Å–ø–∏—Å–∫–µ –ø–æ—Ö–æ–∂–∏—Ö
    """
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ Excel-—Ç–∞–±–ª–∏—Ü—ã. –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {output_file}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        sorted_data = []
        for key, data in channels_data.items():
            sorted_data.append((key, data))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —á–∏—Å–ª–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
        sorted_data.sort(key=lambda x: x[1]['intersections'], reverse=True)

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏
        result = []
        for key, data in sorted_data:
            result.append({
                'title': data['title'],
                'link': data['link'],
                'subs': parse_subscribers_count(data['subs']),
                'depth': data['depth'],
                'intersections': data['intersections'],
                'second_level_donor': data['second_level_donor'],
                'donor_position': data.get('donor_position', '')
            })

        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(result)}")

        # –°–æ–∑–¥–∞–µ–º DataFrame –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
        df = pd.DataFrame(result)
        logger.info("DataFrame —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(output_file), exist_ok=True)
        logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ñ–∞–π–ª–∞ —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: {os.path.dirname(output_file)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
        df.to_excel(output_file, index=False)
        logger.info(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {output_file}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è
        if os.path.exists(output_file):
            logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {output_file}")
            logger.info(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(output_file)} –±–∞–π—Ç")
        else:
            logger.error(f"–§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω: {output_file}")
        
        # –í—ã–≤–æ–¥–∏–º JSON –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥
        print(json.dumps(result, ensure_ascii=False))
        logger.info(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –≤ JSON!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel-—Ç–∞–±–ª–∏—Ü—ã: {str(e)}")
        logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        raise


async def run_similar_channels_analysis(session_path: str, donor_channel: str, output_file: str = "similar_channels.xlsx", max_depth: int = 2):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel-—Ñ–∞–π–ª.
    
    Args:
        session_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏ Telethon (.session)
        donor_channel: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–Ω–æ—Ä—Å–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "@channel")
        output_file: –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ Excel-—Ñ–∞–π–ª–∞
        max_depth: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2)
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–∞–Ω–∞–ª–∞—Ö
    """
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É similar, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    os.makedirs(SIMILAR_DIR, exist_ok=True)
    
    # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å SIMILAR_DIR, –¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å
    if not output_file.startswith(SIMILAR_DIR):
        output_file = os.path.join(SIMILAR_DIR, output_file)
        
    logger.info(f"–ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞—á–∏–Ω–∞—è —Å {donor_channel}, –≥–ª—É–±–∏–Ω–∞ = {max_depth}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telethon –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
    client = TelegramClient(session_path, **TELEGRAM_CONFIG)
    await client.connect()
    
    if not await client.is_user_authorized():
        logger.error(f"–°–µ—Å—Å–∏—è {session_path} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
        return {}
    
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ –∫–∞–Ω–∞–ª—ã
        channels_data = await collect_similar_channels(client, donor_channel, max_depth)
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(channels_data)} –∫–∞–Ω–∞–ª–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º Excel-—Ç–∞–±–ª–∏—Ü—É
        build_excel_table(channels_data, output_file)
        
        return channels_data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤: {e}")
        return {}
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await client.disconnect()


async def check_authorized_sessions(session_files, sessions_dir):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–∞–∫–∏–µ —Å–µ—Å—Å–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π.
    
    Args:
        session_files: –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π (–±–µ–∑ –ø—É—Ç–∏)
        sessions_dir: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Å–µ—Å—Å–∏—è–º–∏
        
    Returns:
        list: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º —Å–µ—Å—Å–∏—è–º
    """
    authorized_sessions = []
    logger.info(f"–ü—Ä–æ–≤–µ—Ä—è—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é {len(session_files)} —Å–µ—Å—Å–∏–π...")
    
    for session_file in session_files:
        session_path = os.path.join(sessions_dir, session_file)
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            client = TelegramClient(session_path.replace('.session', ''), **TELEGRAM_CONFIG)
            await client.connect()
            
            if await client.is_user_authorized():
                authorized_sessions.append(session_path)
                logger.info(f"–°–µ—Å—Å–∏—è {session_file} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
            else:
                logger.warning(f"–°–µ—Å—Å–∏—è {session_file} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞, –∏—Å–∫–ª—é—á–∞—é –∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
                
            await client.disconnect()
            
        except (AuthKeyDuplicatedError, PhoneNumberInvalidError) as e:
            error_type = "–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞" if isinstance(e, AuthKeyDuplicatedError) else "–Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä"
            logger.error(f"–°–µ—Å—Å–∏—è {session_file} - –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {error_type}")
        except Exception as e:
            logger.error(f"–°–µ—Å—Å–∏—è {session_file} - –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(authorized_sessions)} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –∏–∑ {len(session_files)}")
    return authorized_sessions


async def parallel_similar_channels_analysis(donor_channels_list: list, output_file: str = "similar_channels.xlsx", max_depth: int = 2):
    """
    –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π.
    
    Args:
        donor_channels_list (list): –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        output_file (str): –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        max_depth (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
    """
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É similar, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    os.makedirs(SIMILAR_DIR, exist_ok=True)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    if donor_channels_list:
        channel_domain = extract_channel_domain(donor_channels_list[0])
        if not output_file.startswith(SIMILAR_DIR):
            output_file = os.path.join(SIMILAR_DIR, f"{channel_domain}_similar_channels.xlsx")
        else:
            output_file = os.path.join(SIMILAR_DIR, f"{channel_domain}_similar_channels.xlsx")
    else:
        if not output_file.startswith(SIMILAR_DIR):
            output_file = os.path.join(SIMILAR_DIR, output_file)
        else:
            output_file = output_file
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –∏–∑ –ø–∞–ø–∫–∏ sessionsPREM
    sessions_dir = "sessionsPREM"
    if not os.path.exists(sessions_dir):
        logger.error(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {sessions_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return {}
        
    session_files = [f for f in os.listdir(sessions_dir) if f.endswith('.session')]
    if not session_files:
        logger.error(f"–í –ø–∞–ø–∫–µ {sessions_dir} –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π (.session)")
        return {}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å–µ—Å—Å–∏–π –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ
    sessions = await check_authorized_sessions(session_files, sessions_dir)
    
    if not sessions:
        logger.error(f"–í –ø–∞–ø–∫–µ {sessions_dir} –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
        return {}
    
    session_count = len(sessions)
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {session_count} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –≤ –ø–∞–ø–∫–µ {sessions_dir}")
    
    # –ï—Å–ª–∏ –Ω–∞ –æ–¥–Ω—É —Å–µ—Å—Å–∏—é –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–æ–≤, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
    if session_count == 1:
        logger.warning(f"–ù–∞–π–¥–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è. –í—Å–µ {len(donor_channels_list)} –∫–∞–Ω–∞–ª–æ–≤ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —á–µ—Ä–µ–∑ –Ω–µ—ë.")
        logger.warning(f"–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É –¥–æ 1 –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–µ–π.")
        print(f"–í–ù–ò–ú–ê–ù–ò–ï: –ù–∞–π–¥–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –≤ –ø–∞–ø–∫–µ {sessions_dir}.")
        print(f"–ß–µ—Ä–µ–∑ –Ω–µ—ë –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(donor_channels_list)} –∫–∞–Ω–∞–ª–æ–≤, —á—Ç–æ –ø–æ–≤—ã—à–∞–µ—Ç —Ä–∏—Å–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
        print("–î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≥–ª—É–±–∏–Ω–∞ –ø–æ–∏—Å–∫–∞ –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –¥–æ 1.")
        
        # –î–ª—è –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏ —É–º–µ–Ω—å—à–∞–µ–º –≥–ª—É–±–∏–Ω—É –¥–æ 1 –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if max_depth > 1:
            max_depth = 1
    
    elif session_count > 5:
        logger.warning(f"–ù–∞ –∫–∞–∂–¥—É—é —Å–µ—Å—Å–∏—é –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è {session_count:.1f} –∫–∞–Ω–∞–ª–æ–≤, —á—Ç–æ –ø–æ–≤—ã—à–∞–µ—Ç —Ä–∏—Å–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
        print(f"–í–ù–ò–ú–ê–ù–ò–ï: –ù–∞ –∫–∞–∂–¥—É—é —Å–µ—Å—Å–∏—é –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω–æ {session_count:.1f} –∫–∞–Ω–∞–ª–æ–≤.")
        print("–≠—Ç–æ –º–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–∏—Å–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞ —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã.")
        print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Å–µ—Å—Å–∏–π –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤.")
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª—ã –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏
    tasks = []
    all_channels_data = {}
    
    # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª–æ–≤ –±–æ–ª—å—à–µ —á–µ–º —Å–µ—Å—Å–∏–π, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ
    if donor_channels_list:
        for i, donor_channel in enumerate(donor_channels_list):
            # –ë–µ—Ä–µ–º —Å–µ—Å—Å–∏—é –ø–æ –∫—Ä—É–≥—É (–æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è)
            session_index = i % len(sessions)
            session_path = sessions[session_index]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            temp_output = os.path.join(SIMILAR_DIR, f"temp_{os.path.basename(session_path)}_{i}.xlsx")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–∞
            tasks.append(
                run_similar_channels_analysis(
                    session_path=session_path,
                    donor_channel=donor_channel,
                    output_file=temp_output,
                    max_depth=max_depth
                )
            )
    else:
        # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–Ω—É —Å–µ—Å—Å–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        logger.warning("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç, –±—É–¥–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –æ–¥–∏–Ω –∫–∞–Ω–∞–ª.")
        if sessions:
            tasks.append(
                run_similar_channels_analysis(
                    session_path=sessions[0],
                    donor_channel="@telegram",  # –ö–∞–Ω–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    output_file=os.path.join(SIMILAR_DIR, f"temp_{os.path.basename(sessions[0])}.xlsx"),
                    max_depth=max_depth
                )
            )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    if tasks:
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for result in results:
            if isinstance(result, Exception):
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞–Ω–∞–ª–∞: {result}")
                continue
                
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä–∏
            for key, data in result.items():
                if key in all_channels_data:
                    # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
                    all_channels_data[key]['intersections'] += data['intersections']
                else:
                    # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª–∞ –µ—â–µ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                    all_channels_data[key] = data
        
        # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é Excel-—Ç–∞–±–ª–∏—Ü—É
        build_excel_table(all_channels_data, output_file)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for task in tasks:
            if hasattr(task, 'output_file') and os.path.exists(task.output_file):
                try:
                    os.remove(task.output_file)
                except:
                    pass
                    
        logger.info(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(all_channels_data)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
        return all_channels_data
    
    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–æ–≤")
    return {}


async def analyze_channel_with_all_sessions(donor_channel: str, output_file: str = "similar_channels.xlsx", max_depth: int = 2):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –∫–∞–Ω–∞–ª –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏ –∏–∑ –ø–∞–ø–∫–∏ sessionsPREM.
    –ü–µ—Ä–≤–∞—è —Å–µ—Å—Å–∏—è –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤, –∑–∞—Ç–µ–º —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è 
    –º–µ–∂–¥—É –≤—Å–µ–º–∏ —Å–µ—Å—Å–∏—è–º–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    
    Args:
        donor_channel: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–Ω–æ—Ä—Å–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        output_file: –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ Excel-—Ñ–∞–π–ª–∞
        max_depth: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
        
    Returns:
        dict: –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–∞–Ω–∞–ª–∞—Ö
    """
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É similar, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    os.makedirs(SIMILAR_DIR, exist_ok=True)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω –¥–æ–Ω–æ—Ä—Å–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    channel_domain = extract_channel_domain(donor_channel)
    if not output_file.startswith(SIMILAR_DIR):
        output_file = os.path.join(SIMILAR_DIR, f"{channel_domain}_similar_channels.xlsx")
    else:
        output_file = os.path.join(SIMILAR_DIR, f"{channel_domain}_similar_channels.xlsx")
    
    logger.info(f"Output file will be saved to: {output_file}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –∏–∑ –ø–∞–ø–∫–∏ sessionsPREM
    sessions_dir = str(BASE_DIR / "sessionsPREM")
    if not os.path.exists(sessions_dir):
        logger.error(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {sessions_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return {}
        
    session_files = [f for f in os.listdir(sessions_dir) if f.endswith('.session')]
    if not session_files:
        logger.error(f"–í –ø–∞–ø–∫–µ {sessions_dir} –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π (.session)")
        return {}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å–µ—Å—Å–∏–π –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ
    sessions = await check_authorized_sessions(session_files, sessions_dir)
    
    if not sessions:
        logger.error(f"–í –ø–∞–ø–∫–µ {sessions_dir} –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
        return {}
    
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(sessions)} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –≤ –ø–∞–ø–∫–µ {sessions_dir}")
    
    if len(sessions) == 1:
        logger.warning(f"–ù–∞–π–¥–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è. –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ω–µ—ë, —á—Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ä–∏—Å–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
        logger.warning(f"–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É –¥–æ 1 –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–µ–π.")
        print(f"–í–ù–ò–ú–ê–ù–ò–ï: –ù–∞–π–¥–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –≤ –ø–∞–ø–∫–µ {sessions_dir}.")
        print("–î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≥–ª—É–±–∏–Ω–∞ –ø–æ–∏—Å–∫–∞ –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –¥–æ 1.")
        print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Å—Å–∏–π –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏.")
        
        if max_depth > 1:
            max_depth = 1
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å –ø–µ—Ä–≤–æ–π —Å–µ—Å—Å–∏–µ–π
    first_session = sessions[0]
    similar_channels_data = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö
    channel_titles = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞–Ω–∞–ª–æ–≤
    client = None
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ø–µ—Ä–≤–æ–π —Å–µ—Å—Å–∏–∏
        client = TelegramClient(first_session, **TELEGRAM_CONFIG)
        await client.connect()
        
        if not await client.is_user_authorized():
            logger.error(f"–°–µ—Å—Å–∏—è {first_session} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
            return {}
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–Ω–æ—Ä—Å–∫–æ–º –∫–∞–Ω–∞–ª–µ
        entity = await client.get_entity(donor_channel)
        donor_key = unique_key(entity)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–æ–Ω–æ—Ä—Å–∫–∏–º –∫–∞–Ω–∞–ª–æ–º
        title = entity.title if hasattr(entity, 'title') else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        if hasattr(entity, 'username') and entity.username:
            link = f"https://t.me/{entity.username}"
        else:
            link = f"ID: {entity.id}"
        subs = getattr(entity, "participants_count", 0)
        
        similar_channels_data[donor_key] = {
            'title': title,
            'link': link,
            'subs': subs,
            'depth': 0,  # –î–æ–Ω–æ—Ä—Å–∫–∏–π –∫–∞–Ω–∞–ª –∏–º–µ–µ—Ç –≥–ª—É–±–∏–Ω—É 0
            'intersections': 1,
            'second_level_donor': "",
            'donor_position': ""  # –ü—É—Å—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –¥–æ–Ω–æ—Ä—Å–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        }
        channel_titles[donor_key] = title
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –¥–æ–Ω–æ—Ä–∞
        logger.info(f"–ü–æ–ª—É—á–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è {donor_key}...")
        await asyncio.sleep(20 * random.uniform(1, 1.2))  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
        similar_entities = await get_similar_channels(client, donor_key)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–Ω–æ—Ä—Å–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ —Å–ø–∏—Å–∫–µ –ø–æ—Ö–æ–∂–∏—Ö –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–≥–æ –ø–æ–∑–∏—Ü–∏—é
        donor_position = 0
        for i, entity in enumerate(similar_entities):
            key = unique_key(entity)
            if key == donor_key:
                donor_position = i + 1  # –ø–æ–∑–∏—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1
                break
        
        # –ï—Å–ª–∏ –¥–æ–Ω–æ—Ä—Å–∫–∏–π –∫–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø–æ—Ö–æ–∂–∏—Ö, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
        if donor_position > 0:
            similar_channels_data[donor_key]['donor_position'] = donor_position
            logger.info(f"–î–æ–Ω–æ—Ä—Å–∫–∏–π –∫–∞–Ω–∞–ª {title} –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {donor_position}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ö–æ–∂–∏–µ –∫–∞–Ω–∞–ª—ã –≤ —Å–ª–æ–≤–∞—Ä—å —Å –≥–ª—É–±–∏–Ω–æ–π 1
        for entity in similar_entities:
            key = unique_key(entity)
            title = entity.title if hasattr(entity, 'title') else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            if hasattr(entity, 'username') and entity.username:
                link = f"https://t.me/{entity.username}"
            else:
                link = f"ID: {entity.id}"
            subs = getattr(entity, "participants_count", 0)
            
            # –í—ã–≤–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            logger.info(f"–ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª: {title} - {subs} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ - {link}")
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–Ω–∞–ª—ã —Å –º–µ–Ω–µ–µ 1000 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            if subs < 1000:
                logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–Ω–∞–ª {title} –∏–∑-–∑–∞ –º–∞–ª–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ ({subs})")
                continue
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–Ω–æ—Ä—Å–∫–∏–π –∫–∞–Ω–∞–ª, —Ç.–∫. –æ–Ω —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤—ã—à–µ
            if key == donor_key:
                continue
                
            similar_channels_data[key] = {
                'title': title,
                'link': link,
                'subs': subs,
                'depth': 1,  # –ü–æ—Ö–æ–∂–∏–µ –∫–∞–Ω–∞–ª—ã –∏–º–µ—é—Ç –≥–ª—É–±–∏–Ω—É 1
                'intersections': 1,
                'second_level_donor': "",  # –£ –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞ –¥–æ–Ω–æ—Ä—Å–∫–∏–π –∫–∞–Ω–∞–ª –Ω–µ—Ç –¥–æ–Ω–æ—Ä–∞ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
                'donor_position': ""  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ, –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
            }
            channel_titles[key] = title
        
        # –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é Excel-—Ç–∞–±–ª–∏—Ü—É
        # —Å –¥–æ–Ω–æ—Ä—Å–∫–∏–º –∫–∞–Ω–∞–ª–æ–º –∏ –ø–æ—Ö–æ–∂–∏–º–∏ –Ω–∞ –Ω–µ–≥–æ (–¥–æ –ø–æ–∏—Å–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è)
        if len(similar_channels_data) > 1:  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ—Ö–æ–∂–∏–π –∫–∞–Ω–∞–ª
            logger.info(f"–°–æ–∑–¥–∞–µ–º Excel-—Ç–∞–±–ª–∏—Ü—É —Å –¥–æ–Ω–æ—Ä—Å–∫–∏–º –∫–∞–Ω–∞–ª–æ–º –∏ {len(similar_channels_data) - 1} –ø–æ—Ö–æ–∂–∏–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏")
            first_level_output = os.path.join(SIMILAR_DIR, f"first_level_{os.path.basename(output_file)}")
            build_excel_table(similar_channels_data, first_level_output)
            logger.info(f"–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {first_level_output}")
        
        # –°–ø–∏—Å–æ–∫ –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        similar_channels_list = [key for key in similar_channels_data.keys() if key != donor_key]
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(similar_channels_list)} –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è {donor_key}")
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Ö–æ–∂–∏–µ –∫–∞–Ω–∞–ª—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è Excel-—Ñ–∞–π–ª–∞
        if len(similar_channels_list) == 0:
            logger.warning(f"–î–ª—è –∫–∞–Ω–∞–ª–∞ {donor_channel} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Ö–æ–∂–∏–µ –∫–∞–Ω–∞–ª—ã. –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω.")
            print(f"–î–ª—è –∫–∞–Ω–∞–ª–∞ {donor_channel} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Ö–æ–∂–∏–µ –∫–∞–Ω–∞–ª—ã.")
            return {}
            
        # –ï—Å–ª–∏ –≥–ª—É–±–∏–Ω–∞ —Ä–∞–≤–Ω–∞ 1, —Ç–æ –º—ã —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É
        if max_depth == 1:
            # –°–æ–∑–¥–∞–µ–º Excel-—Ç–∞–±–ª–∏—Ü—É
            build_excel_table(similar_channels_data, output_file)
            logger.info(f"–ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞ {donor_channel} –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(similar_channels_data)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {output_file}")
            return similar_channels_data
            
        # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –ø–µ—Ä–≤–æ–π —Å–µ—Å—Å–∏–∏
        if client and client.is_connected():
            await client.disconnect()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è {donor_channel}: {e}")
        return {}
    finally:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        try:
            if client and client.is_connected():
                await client.disconnect()
                logger.info(f"–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Å–µ—Å—Å–∏–∏ {os.path.basename(first_session)} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ {os.path.basename(first_session)}: {e}")
    
    # –®–ê–ì 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ö–æ–∂–∏–µ –∫–∞–Ω–∞–ª—ã –º–µ–∂–¥—É –≤—Å–µ–º–∏ —Å–µ—Å—Å–∏—è–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
    logger.info(f"–®–∞–≥ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º {len(similar_channels_list)} –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –º–µ–∂–¥—É {len(sessions)} —Å–µ—Å—Å–∏—è–º–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
    if not similar_channels_list:
        logger.info("–ü–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
        return {}
        
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ - –∫–∞–∂–¥–∞—è —Å–µ—Å—Å–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–≤–æ–π –Ω–∞–±–æ—Ä –∫–∞–Ω–∞–ª–æ–≤
    tasks = []
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –ø–æ —Å–µ—Å—Å–∏—è–º
    chunks = []
    chunk_size = max(1, len(similar_channels_list) // len(sessions))
    for i in range(0, len(similar_channels_list), chunk_size):
        chunks.append(similar_channels_list[i:i + chunk_size])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —á–∞–Ω–∫–∏, –µ—Å–ª–∏ —Å–µ—Å—Å–∏–π –±–æ–ª—å—à–µ —á–µ–º —á–∞–Ω–∫–æ–≤
    while len(chunks) < len(sessions):
        chunks.append([])
    
    await asyncio.sleep(32 * random.uniform(1, 1.2))

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏
    for i, (session_path, channels_chunk) in enumerate(zip(sessions, chunks)):
        if not channels_chunk:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
            
        # –ò–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        session_name = os.path.basename(session_path).replace('.session', '')
        # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
        temp_output = os.path.join(SIMILAR_DIR, f"temp_{session_name}.xlsx")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–æ–µ–≥–æ –Ω–∞–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤ (depth=2)
        tasks.append(
            analyze_similar_channels_subset(
                session_path=session_path,
                channels_list=channels_chunk,
                donor_key=donor_key,  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–ª—é—á –¥–æ–Ω–æ—Ä–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏ second_level_donor
                channel_titles=channel_titles,  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–∞–Ω–∞–ª–æ–≤
                output_file=temp_output
            )
        )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –∏ —Å–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    all_channels_data = similar_channels_data.copy()  # –ù–∞—á–∏–Ω–∞–µ–º —Å —É–∂–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
    
    if tasks:
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≥—Ä—É–ø–ø—ã –∫–∞–Ω–∞–ª–æ–≤ —Å —Å–µ—Å—Å–∏–µ–π {session_files[i]}: {result}")
                continue
                
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä–∏
            for key, data in result.items():
                if key in all_channels_data:
                    # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
                    all_channels_data[key]['intersections'] += data['intersections']
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–Ω–æ—Ä–µ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ
                    if data['second_level_donor'] and not all_channels_data[key]['second_level_donor']:
                        all_channels_data[key]['second_level_donor'] = data['second_level_donor']
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–æ–Ω–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ
                    if data.get('donor_position') and not all_channels_data[key].get('donor_position'):
                        all_channels_data[key]['donor_position'] = data['donor_position']
                else:
                    # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª–∞ –µ—â–µ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                    all_channels_data[key] = data
        
        # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é Excel-—Ç–∞–±–ª–∏—Ü—É
        build_excel_table(all_channels_data, output_file)
        logger.info(f"–ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {output_file}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for i, task in enumerate(tasks):
            session_name = os.path.basename(sessions[i]).replace('.session', '')
            temp_output = os.path.join(SIMILAR_DIR, f"temp_{session_name}.xlsx")
            if os.path.exists(temp_output):
                try:
                    os.remove(temp_output)
                    logger.info(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {temp_output}")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {temp_output}: {e}")
                    
        logger.info(f"–ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞ {donor_channel} –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(all_channels_data)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
        return all_channels_data
    
    # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∏ –Ω–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –æ –¥–æ–Ω–æ—Ä—Å–∫–æ–º –∫–∞–Ω–∞–ª–µ –∏ –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö
    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤")
    build_excel_table(similar_channels_data, output_file)
    logger.info(f"–¢–∞–±–ª–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {output_file}")
    return similar_channels_data


async def analyze_similar_channels_subset(session_path: str, channels_list: list, donor_key: str, channel_titles: dict, output_file: str = "temp_channels.xlsx"):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ (–ø–æ–ª—É—á–∞–µ—Ç –ø–æ—Ö–æ–∂–∏–µ –∫–∞–Ω–∞–ª—ã –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è).
    
    Args:
        session_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏
        channels_list: –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        donor_key: –ö–ª—é—á –¥–æ–Ω–æ—Ä—Å–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        channel_titles: –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–∞–Ω–∞–ª–æ–≤
        output_file: –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–∞–Ω–∞–ª–∞—Ö
    """
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É similar, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    os.makedirs(SIMILAR_DIR, exist_ok=True)
    
    # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å SIMILAR_DIR, –¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å
    if not output_file.startswith(SIMILAR_DIR):
        output_file = os.path.join(SIMILAR_DIR, output_file)
        
    logger.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {len(channels_list)} –∫–∞–Ω–∞–ª–æ–≤ —Å —Å–µ—Å—Å–∏–µ–π {os.path.basename(session_path)}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telethon
    client = None
    
    try:
        client = TelegramClient(session_path, **TELEGRAM_CONFIG)
        await client.connect()
        
        if not await client.is_user_authorized():
            logger.error(f"–°–µ—Å—Å–∏—è {session_path} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
            return {}
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        channels_data = {}
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
        for i, channel_key in enumerate(channels_list):
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            if i > 0:
                delay = 32 * random.uniform(1, 1.2)  # 60 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                logger.info(f"–î–µ–ª–∞—é –ø–∞—É–∑—É {delay:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫–∞–Ω–∞–ª–∞ {channel_key}")
                await asyncio.sleep(delay)
                
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞
                logger.info(f"–ü–æ–ª—É—á–∞—é –ø–æ—Ö–æ–∂–∏–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è {channel_key}")
                
                similar_entities = await get_similar_channels(client, channel_key)
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(similar_entities)} –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è {channel_key}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–æ–Ω–æ—Ä—Å–∫–∏–π –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–∫–µ –ø–æ—Ö–æ–∂–∏—Ö, –∏ –µ—Å–ª–∏ –¥–∞, –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–≥–æ –ø–æ–∑–∏—Ü–∏—é
                donor_position = 0
                for i, entity in enumerate(similar_entities):
                    if unique_key(entity) == donor_key:
                        donor_position = i + 1  # –ü–æ–∑–∏—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1
                        break
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ –∫–∞–Ω–∞–ª—ã
                for sim_entity in similar_entities:
                    sim_key = unique_key(sim_entity)
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–Ω–æ—Ä—Å–∫–∏–π –∫–∞–Ω–∞–ª
                    if sim_key == donor_key:
                        continue
                        
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π, –µ—Å–ª–∏ –∫–∞–Ω–∞–ª —É–∂–µ –µ—Å—Ç—å
                    if sim_key in channels_data:
                        channels_data[sim_key]['intersections'] += 1
                        continue
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
                    title = sim_entity.title if hasattr(sim_entity, 'title') else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                    if hasattr(sim_entity, 'username') and sim_entity.username:
                        link = f"https://t.me/{sim_entity.username}"
                    else:
                        link = f"ID: {sim_entity.id}"
                    subs = getattr(sim_entity, "participants_count", 0)
                    
                    if subs < 1000:
                        # logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–Ω–∞–ª {title} –∏–∑-–∑–∞ –º–∞–ª–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ ({subs})")
                        continue
                
                    channels_data[sim_key] = {
                        'title': title,
                        'link': link,
                        'subs': subs,
                        'depth': 2,  # –≠—Ç–æ –∫–∞–Ω–∞–ª—ã –≥–ª—É–±–∏–Ω—ã 2
                        'intersections': 1,
                        'second_level_donor': channel_titles.get(channel_key, ""),  # –ë–µ—Ä–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞-–¥–æ–Ω–æ—Ä–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                        'donor_position': ""  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–æ
                    }
                
                # –ï—Å–ª–∏ –¥–æ–Ω–æ—Ä—Å–∫–∏–π –∫–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø–æ—Ö–æ–∂–∏—Ö, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞
                if donor_position > 0 and channel_key in channels_data:
                    channels_data[channel_key]['donor_position'] = donor_position
                    logger.info(f"–î–æ–Ω–æ—Ä—Å–∫–∏–π –∫–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {donor_position} –≤ —Å–ø–∏—Å–∫–µ –ø–æ—Ö–æ–∂–∏—Ö –¥–ª—è {channel_titles.get(channel_key, channel_key)}")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è {channel_key}: {e}")
                continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if channels_data:
            build_excel_table(channels_data, output_file)
            
        logger.info(f"–ê–Ω–∞–ª–∏–∑ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏–∑ {len(channels_list)} –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(channels_data)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è.")
        return channels_data
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ analyze_similar_channels_subset: {e}")
        return {}
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∏–µ–Ω—Ç–∞, –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        try:
            if client and client.is_connected():
                await client.disconnect()
                logger.info(f"–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Å–µ—Å—Å–∏–∏ {os.path.basename(session_path)} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ {os.path.basename(session_path)}: {e}")


async def convertToTDATA(session: str):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏—é Telethon –≤ —Ñ–æ—Ä–º–∞—Ç TDesktop (tdata).
    
    Args:
        session: –ò–º—è —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏ (–±–µ–∑ –ø—É—Ç–∏)
    """
    if not OPENTELE_AVAILABLE:
        logger.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é: –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ opentele –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        print("–û—à–∏–±–∫–∞: –î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–π —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É opentele:")
        print("pip install opentele")
        return False
        
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è tdata, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs("tdata", exist_ok=True)
        
        session_path = os.path.join("sessions", session)
        if not os.path.exists(session_path + ".session"):
            logger.error(f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏ {session_path}.session –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Telethon –∏–∑ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏
        client = TelegramClient(session_path, **TELEGRAM_CONFIG)
        await client.connect()
        
        if not await client.is_user_authorized():
            logger.error(f"–°–µ—Å—Å–∏—è {session} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
            await client.disconnect()
            return False
            
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ TDesktop
        logger.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é —Å–µ—Å—Å–∏—é {session} –≤ —Ñ–æ—Ä–º–∞—Ç TDesktop...")
        tdesk = await client.ToTDesktop(flag=UseCurrentSession)
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏
        tdata_folder = os.path.join("tdata", session)
        os.makedirs(tdata_folder, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º TDesktop-—Å–µ—Å—Å–∏—é
        tdesk.SaveTData(tdata_folder)
        logger.info(f"–°–µ—Å—Å–∏—è {session} —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ tdata: {tdata_folder}")
        print(f"–°–µ—Å—Å–∏—è {session} —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ tdata: {tdata_folder}")
        
        await client.disconnect()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ {session}: {e}")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ {session}: {e}")
        return False


async def convert_sessions_to_tdata(sessions_list=None):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ Telethon –≤ —Ñ–æ—Ä–º–∞—Ç TDesktop.
    –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ —É–∫–∞–∑–∞–Ω, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –ø–∞–ø–∫–∏ sessions.
    
    Args:
        sessions_list: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è .session)
        
    Returns:
        tuple: (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫)
    """
    if not OPENTELE_AVAILABLE:
        logger.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é: –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ opentele –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        print("–û—à–∏–±–∫–∞: –î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–π —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É opentele:")
        print("pip install opentele")
        return 0, 0
        
    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ sessions
    if not sessions_list:
        if not os.path.exists("sessions"):
            logger.error("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è 'sessions' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return 0, 0
            
        sessions_list = [f[:-8] for f in os.listdir("sessions") if f.endswith(".session")]
        
    if not sessions_list:
        logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
        return 0, 0
        
    success_count = 0
    error_count = 0
    
    logger.info(f"–ù–∞—á–∏–Ω–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é {len(sessions_list)} —Å–µ—Å—Å–∏–π...")
    print(f"–ù–∞—á–∏–Ω–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é {len(sessions_list)} —Å–µ—Å—Å–∏–π...")
    
    for session in sessions_list:
        print(f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é —Å–µ—Å—Å–∏—é: {session}")
        if await convertToTDATA(session):
            success_count += 1
        else:
            error_count += 1
            
    logger.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success_count}, –æ—à–∏–±–æ–∫: {error_count}")
    print(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success_count}, –æ—à–∏–±–æ–∫: {error_count}")
    
    return success_count, error_count


async def run_channels_analysis_cli():
    """
    –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏ —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
    """
    parser = argparse.ArgumentParser(description='–ê–Ω–∞–ª–∏–∑ –ø–æ—Ö–æ–∂–∏—Ö Telegram-–∫–∞–Ω–∞–ª–æ–≤')
    parser.add_argument('--mode', type=str, choices=['single', 'multi', 'convert'], default='single',
                      help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: single - –æ–¥–∏–Ω –∫–∞–Ω–∞–ª, multi - —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, convert - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–µ—Å—Å–∏–π –≤ tdata')
    parser.add_argument('--channel', type=str, help='–ö–∞–Ω–∞–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–¥–ª—è —Ä–µ–∂–∏–º–∞ single)')
    parser.add_argument('--channels-file', type=str, help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞–Ω–∞–ª–æ–≤ (–¥–ª—è —Ä–µ–∂–∏–º–∞ multi)')
    parser.add_argument('--output', type=str, default='similar_channels.xlsx',
                      help='–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ Excel-—Ñ–∞–π–ª–∞')
    parser.add_argument('--depth', type=int, default=2,
                      help='–ì–ª—É–±–∏–Ω–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2)')
    parser.add_argument('--sessions', type=str, help='–°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–¥–ª—è —Ä–µ–∂–∏–º–∞ convert)')
    
    args = parser.parse_args()
    
    if args.mode == 'convert':
        if args.sessions:
            sessions_list = [s.strip() for s in args.sessions.split(',')]
            await convert_sessions_to_tdata(sessions_list)
        else:
            await convert_sessions_to_tdata()  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏
        return
    
    if args.mode == 'single':
        if not args.channel:
            print("–û—à–∏–±–∫–∞: –¥–ª—è —Ä–µ–∂–∏–º–∞ 'single' –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä --channel")
            return
            
        logger.info(f"2–ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞ {args.channel} —Å –≥–ª—É–±–∏–Ω–æ–π {args.depth}")
        await analyze_channel_with_all_sessions(
            donor_channel=args.channel,
            output_file=args.output,
            max_depth=args.depth
        )
    else:  # multi
        if not args.channels_file:
            print("–û—à–∏–±–∫–∞: –¥–ª—è —Ä–µ–∂–∏–º–∞ 'multi' –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä --channels-file")
            return
            
        try:
            with open(args.channels_file, 'r') as f:
                channels = [line.strip() for line in f if line.strip()]
                
            if not channels:
                print(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {args.channels_file} –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
                return
                
            logger.info(f"–ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ {len(channels)} –∫–∞–Ω–∞–ª–æ–≤ —Å –≥–ª—É–±–∏–Ω–æ–π {args.depth}")
            await parallel_similar_channels_analysis(
                donor_channels_list=channels,
                output_file=args.output,
                max_depth=args.depth
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞–Ω–∞–ª–æ–≤: {e}")


async def close_all_pending_tasks():
    """
    –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã.
    –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫–∏ "Task was destroyed but it is pending!"
    """
    tasks = [task for task in asyncio.all_tasks() if task is not asyncio.current_task()]
    if not tasks:
        return
        
    logger.info(f"–ó–∞–≤–µ—Ä—à–∞—é {len(tasks)} –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á...")
    for task in tasks:
        task.cancel()
        
    await asyncio.gather(*tasks, return_exceptions=True)
    logger.info("–í—Å–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")


async def run_with_proper_shutdown(coro):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ—Ä—É—Ç–∏–Ω—É —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –≤—Å–µ—Ö –∑–∞–¥–∞—á.
    
    Args:
        coro: –ö–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    """
    try:
        await coro
    finally:
        await close_all_pending_tasks()


def extract_channel_domain(channel: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–æ–º–µ–Ω –∫–∞–Ω–∞–ª–∞ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–≤–æ–¥–∞.
    
    Args:
        channel: –°—Ç—Ä–æ–∫–∞ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö @channel, https://t.me/channel, channel)
        
    Returns:
        str: –î–æ–º–µ–Ω –∫–∞–Ω–∞–ª–∞
    """
    # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
    channel = channel.lstrip('@')
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–Ω—ã–π URL, –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω
    if 't.me/' in channel:
        channel = channel.split('t.me/')[-1]
    
    # –£–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–ª–µ /
    channel = channel.split('/')[0]
    
    return channel


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    asyncio.run(run_with_proper_shutdown(run_channels_analysis_cli())) 